커서


03/24

컴파일러 수업

지난 수업

왼쪽 순환은 
무한반복한다. 그렇기 떄문에 처리를 해줘야되는데
왼쪽 순환 문법을 오른쪽 순환 문법으로 바꿔준다.

///❗ 단점
컴파일러가 직접 왼쪽 순환을 처리하려 하면, 무한루프에 빠지거나 분석이 어려워요.
///🔸 정리하자면:
왼쪽 순환은 컴파일러가 분석을 시작하자마자 자기 자신을 또 호출하게 만들어 무한 반복에 빠질 위험이 있어요.

그래서 오른쪽 순환으로 변환하여 컴파일러가 분석하기 쉽고 안전하게 만들어 주는 거예요.

A-> Aa | B
 A
 /\
A  a   또는  B로 바뀔 수 있다.

///여기서 알아야할 점은 어떤게 왼쪽 순환인지 오른쪽 순환인지 이전 수업을 공부해야할것 같다.

구문중심 방법의 2가지 방법

번역계획, 애노테이티드 파스트리.

지금 하양식 예측 파서를 공부하고있다.

////파싱이되는지 안되는지 아는방법?
/// 파싱:파싱은 입력된 문장이 문법 규칙에 맞게 작성되었는지 검사하는 과정입니다.
즉, 파싱된다는 건 입력 문장이 문법 규칙대로 성공적으로 분석이 가능하다는 뜻이에요.



규칙 2 15p는 후위표기로 할경우 파싱이 되지않는다.
952+-가 나온다.

expr -> term rest { print('+') } 인경우 프린트는 번역계획 왼쪽은 문법.

17p
논터미널 터미널인지 알수있는 방법은 term에 숫자가 들어가는걸 알기떄문에
term은 논터미널이구나. 라고 생각할 수 있다.


expr -> term rest { print('+') } 를 이용하여
A    -> A    a 

e->e + term  
A->A a


e->e - term
A->A B




왼쪽 순환은 안되기때문에 오른쪽 순환으로 갔고

번역계획을 이용하여 오른쪽 순환 하양식 예측 파서로 구현.

